generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Product {
 id          String    @id @default(auto()) @map("_id") @db.ObjectId
  price        Int
  expense      Int
  date         String
  name         String
  transactions Transaction[]
  createdAt   DateTime  @default(now())
}

model Transaction {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  buyer     String
  date      String
  product   Product @relation(fields: [productId], references: [id])
  productId String @db.ObjectId
  createdAt   DateTime  @default(now())
}

// model User {
//   id          String    @id @default(auto()) @map("_id") @db.ObjectId
//   email       String    @unique
//   password    String
//   name        String?
//   avatarUrl   String?
//   dateOfBirth DateTime?
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt
//   bio         String?
//   location    String?
//   posts       Post[]
//   likes       Like[]
//   comments    Comment[]
//   followers   Follows[] @relation("following")
//   following   Follows[] @relation("follower")
// }

// model Post {
//   id        String    @id @default(auto()) @map("_id") @db.ObjectId
//   content   String
//   author    User      @relation(fields: [authorId], references: [id])
//   authorId  String    @db.ObjectId
//   likes     Like[]
//   comments  Comment[]
//   createdAt DateTime  @default(now())
//   imageUrl  String?
// }

// model Follows {
//   id          String @id @default(auto()) @map("_id") @db.ObjectId
//   follower    User   @relation("follower", fields: [followerId], references: [id])
//   followerId  String @db.ObjectId
//   following   User   @relation("following", fields: [followingId], references: [id])
//   followingId String @db.ObjectId
// }

// model Post {
//   id        String    @id @default(auto()) @map("_id") @db.ObjectId
//   content   String
//   author    User      @relation(fields: [authorId], references: [id])
//   authorId  String    @db.ObjectId
//   likes     Like[]
//   comments  Comment[]
//   createdAt DateTime  @default(now())
//   imageUrl  String?
// }

// model Comment {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   content   String
//   user      User     @relation(fields: [userId], references: [id])
//   userId    String   @db.ObjectId
//   post      Post     @relation(fields: [postId], references: [id])
//   postId    String   @db.ObjectId
//   createdAt DateTime @default(now())
//   imageUrl  String?
// }
